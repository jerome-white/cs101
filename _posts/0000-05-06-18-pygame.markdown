---
layout: post
title: "Lab 18: PyGame"
categories: lab
date: 0000-05-06
---

## Main Event


### <a name="intro"></a>1. Introduction
#### Pygame

If you have not done so already, you should first setup and install
Pygame. Open terminal and type the following command:

```bash
$> pip install pygame
```

The [Pygame documentation](https://www.pygame.org/docs/) is a good
resource for learning and for reference.

#### Pythonw

For best results, Python programs that import and use Pygame should be
run from the command line. In doing so, they should be run using
`pythonw` instead of `python`. Thus, non-graphical programs would be
run as follows:

```bash
$> python myprogram.py
```

Graphical programs, on the other hand:

```bash
$> pythonw myprogram.py
```

#### Command line basics

Remember the basics of command line interaction:

* `cd` changes your current location

* `ls` lists the files in your current directory (`dir` for Windows
  users)

To run a program, you should either `cd` to the directory that
contains the program, then run it:

```bash
$> cd a/b/c
$> python d.py
```

or pass the *absolute* path of the program directly to python:

```bash
$> python a/b/c/d.py
```

If there are spaces in either your directory name or your Python file,
you will need to either escape the spaces, or put everything in
quotes. These examples are equivalent:

```bash
$> python "path/to my favourite/directory in the world/myprogram.py"
$> python path/to\ my\ favourite/directory\ in\ the\ world/myprogram.py
```


### <a name="picasso"></a>2. Picasso
Build the following robot:

![]({{site.baseurl}}/assets/lab-18/robot.png)

Notice that it's essentially a series of shapes that we have
covered. You can "fake" the overlays by ordering your commands in the
correct way. Your result doesn't have to be exactly as shown, the
focus here is on writing shapes and getting comfortable with Pygame.


### <a name="particles"></a>3. Particle remix
Recall our lab on particles. We essentially built lots of ASCII
characters and had them move around the screen. It wasn't pretty. This
is our chance to correct that! Give your old particle code a new life
in Pygame:


* Make a single particle move diagonally across the
  screen.

* Generate a set of particles with random colors, random sizes, and
  random speeds. It may help to create a `display` method within the
  Particle class that calls Pygame's
  [draw.circle](https://www.pygame.org/docs/ref/draw.html#pygame.draw.circle). To
  do so would require the method take a parameter of type
  [Surface](https://www.pygame.org/docs/ref/surface.html) (the type
  returned by
  [display.set_mode](https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode);
  or have the Particle class itself hold a Surface as an attribute.

  Finally, in event loop (the while-loop in the global context), it is
  then just a matter of iterating through your list of Particles, and
  invoking `move` and `display` on each.
    
* Make the particles stay within the bounds of your box. When
  particles were ASCII characters on a Board structure, if their
  coordinates were out of the board bounds we would get an error. Not
  in Pygame: once they are out of the screen boundaries they
  disapear. That's not fun at all.

  Instead, make them either "wrap" back around onto the canvas, or
  bounce off the walls---the latter is probably cooler.
    
* Get the particles to follow your mouse. There are multiple ways of
  doing this, but perhaps the best is to update a Particle's position
  based on some function of its velocity *and* the current mouse
  position. Remember,
    
  ```python
  pygame.mouse.get_pos()
  ```
  
  returns a
  [tuple](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences)
  containing the *x* and *y* coordinates, respectively, of the current
  mouse position.

  Other than the particles reacting to your mouse, there is no wrong
  way to tackle this question.
