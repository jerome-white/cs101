---
layout: post
title: "Lab 8: Files"
categories: lab
date: 0000-02-26
---

## Main Event


### <a name="rw"></a>1. Reading and writing skills
1. Create a Python program that writes ten random numbers between zero
   and 50 to a file.

2. Create a *second* Python program that opens that same file, sums
   its values, and prints the results (normally, not necessarily to
   another file).


### <a name="phone"></a>2. Persistent phone book
These exercises extends the phone book we made in the last lab:

1. Build a database of names and phone numbers. Continuously ask the
   user for their friends name and phone number. When the name that is
   given is the empty string, stop. Instead of saving each entry into
   a dictionary, write them to a file---each name/number combination
   should be a line in the file, with a comma separating the name from
   the number:
  
   ```
   Donald Trump,1-202-123-4567
   Narendra Modi,91-80-3443-3443
   Xi Jinping,86-456-223-3443
   ```
   
   You can name the file whatever you want.

2. Read in the file and create a dictionary of name/numbers. Remember,
   [split](https://docs.python.org/3/library/stdtypes.html#str.split)
   is your friend.
   
3. Continuously ask the user for a name. If that name is in the
   dictionary, print the phone number; otherwise, print a notification
   that it is not. Again, when the empty string is entered, stop the
   interaction.


### <a name="board"></a>3. Read a board from file
Consider a file consisting of a matrix of letters. In such a file the
number of letters on a given line would be the columns; the number of
lines in the file would be the rows. For example, a 3-row, 4-column
matrix would look like the following:

```
ABAB
CDCD
EFEF
```

1. The file [board.txt]({{ site.baseurl }}/assets/lab-08/board.txt)
   represents such a matrix. Download this file and write a program
   that puts its contents into a list-of-lists (lines are sublists).

2. Using code from previous work, print the matrix in a grid:

   ```
   A|B|A|B
   -*-*-*-
   C|D|C|D
   -*-*-*-
   E|F|E|F
   ```

   Note that this format is a slight deviation from the past. Updating
   your logic is good practice.

3. Once you have the matrix in memory, continuously ask the user for
   coordinates, along with a letter:
   
   ```
   >>> Please enter two coordinates (row,col): 2,3
   >>> Please enter a letter: P
   ```
   
   Replace elements of the matrix with the letter entered. In this
   case, the "F" in the lower right corner of the original board.txt
   would be replaced with "P".

   Continue this interaction until the user asks to "stop". At that
   point, write the file back to disk using the same file name
   (board.txt).

If you have done this correctly, you should be able to run the program
again and see a new matrix, updated based on the user interaction.


## Additional Practice


### <a name="rot"></a>1. Fun with file encryption
A [Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) is an
encryption technique that involves replacing letters with other
letters a fixed position down the alphabet. For example, a "right
shift" of five would turn 'a' into 'f'; a "left-shift" of 3 would turn
'b' into 'y'. Although we now know the Caesar cipher is no match for
the [NSA](https://www.nsa.gov), it is still fun to implement.

First, a quick review of ASCII: A widely used character encoding is
the American Standard Code for Information Interchange (ASCII). The
standard assigns numeric values to characters in the English alphabet;
thus, you can use it to treat characters as if they were
numbers. Python provides two functions to do ASCII conversion:
[ord](https://docs.python.org/3/library/functions.html?#ord) takes a
character and returns a number;
[chr](https://docs.python.org/3/library/functions.html?#chr) takes a
number and returns a character:
    
```
>>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a')) == 'a'
True
```

ASCII values are sequential: "b" is 98, "c" is 99, and so on. ASCII
values range from 0 to 127. If you try to print values outside of this
range, you may [get an
error](https://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).

#### Encrypt/Decrypt

* Download either [original-dos.txt]({{ site.baseurl
  }}/assets/lab-08/original-dos.txt) or [original-unix.txt]({{
  site.baseurl }}/assets/lab-08/original-unix.txt) depending on your
  operating system (Windows users the former, other OS's the
  latter). Read the file, right-shift each character by 17 spaces
  (ROT17), then write the shifted character to encrypted.txt.

* Read encrypted.txt and left-shift each alphabetic character by 17
  positions. Write the output to unencrypted.txt. Ensure that the
  original and unencrypted files are the same directory.

You only need to shift characters that are letters---do not shift any
other character (whitespace or punctunation, for example)! You can
easily identify a character in this range by looking at it's ASCII
value. Also you can assume all characters are lower-case.

#### Check your work

To test whether you have done things correctly by comparing
original.txt and unencrypted.txt. In Python, that can be done using
the [filecmp](https://docs.python.org/3/library/filecmp.html) module:

```python
import filecmp
diff = filecmp.cmp('original.txt', 'unencrypted.txt', False)
```

The value of `diff` should be `True`.

