---
layout: post
title: "Lab 9: CSV files"
categories: lab
date: 0000-03-04
---

## Main Event


### <a name="intro"></a>1. CSV dragons
Download [dragons.csv]({{ site.baseurl }}/assets/lab-09/dragons.csv)
from the class website. This CSV file has a header that outlines what
the columns actually mean.

Many of these exercises can be accomplished by assuming certain values
for each dragon attribute and coding to those values. For example,
examining the CSV file to see exactly what breeds exist, and
hard-coding those breed names into your script. You should not do
this. Instead, develop an understanding of the different
attributes-value possibilities in your code. In the end, if given a
dragon file with a different set of breeds or ages, your code should
still work *without alteration*.


### <a name="dragon-stats"></a>2. Dragon stats
Write a Python script that calculates the following:

* The average length of a dragon name. Recall the question from the
  previous lab that asked you to use a dictionary to count characters
  in a string. The logic to solve this question is equivalent.

* The minimum, maximum, and mode of the dragon ages. Python has
  builtin functions for each:

  ```
  >>> x = [1, 2, 2, 3]
  >>> min(x)
  1
  >>> max(x)
  3
  >>> import statistics
  >>> statistics.mode(x)
  2
  ```




### <a name="breed-stats"></a>3. Breed stats
Write a Python script that calculates the following:

* The number of dragons in each breed.

* The profile (name, age, size, and color) of the largest dragon in
  each breed. If there are ties, identifying a single dragon within
  the maximal set sufficient.


### <a name="group-by"></a>4. Group-by breed
Notice that each dragon is part of a particular breed. Rewrite the
file---generate a new CSV file---such that it is *grouped-by* breed.

Grouping a file by a particular attribute means that neighboring lines
all have the same value for a particular attribute. Consider the
following list of people:

Name | Age | Size
--- | --- | ---
Bob | 21 | medium
Tom | 12 | small
Meghna | 56 | medium
Xi | 32 | large
Alex | 23 | medium
Maria | 45 | large

If such a list were grouped-by size, it would be written:

Name | Age | Size
--- | --- | ---
Tom | 12 | small
Bob | 21 | medium
Meghna | 56 | medium
Alex | 23 | medium
Xi | 32 | large
Maria | 45 | large

The order in which the grouped categories appear does not matter. That
they appear together does.

For this, and the next, exercise, you will not only need to read in
the entire dragon file, but you will need to structure the data in
such a way that you can easily manipulate it later. Remember, lists
can hold lots of values, and dictionaries can group various
attributes---think through how these might come together to solve your
problem(s) in this case. It might help if you draw out what's going
on, and how you want to organize the data.


### <a name="sort-by"></a>5. Sort-by age
Rewrite dragons.csv such that it is ordered by age. Remember, to sort
a list in Python:

```
>>> x = [6, 2, 3, 8, 2]
>>> x.sort()
>>> print(x)
[2, 2, 3, 6, 8]
```


## Additional Practice


### <a name="group-stats"></a>1. Group stats
Use your understanding of groupings to write Python scripts that do
the following:

* Calculates the average age for each breed.

* Displays the profile (name, age, size, and color) of *all* of the
  largest dragons in each breed. Whereas [before](#breed-stats)
  ignoring ties was fine, this time they should be considered: the
  final list for each breed should include *all* dragons that are of
  the maximal age.

* Displays the number of dragons for each color, for each
  breed. Example output might be as follows:

  ```
  Norwegian Ridgeback:
    red: 12
    blue: 10
    black: 3
  Chinese Fireball:
    white: 4
    blue: 6
  ```
