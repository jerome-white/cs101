---
layout: post
title: "Lab 4: Lists of lists"
categories: lab
date: 0000-01-29
---

## Main Event


### <a name="if-basics"></a>1. If-statement practice
There will be more if-statement practice in the next lab, but for now,
let's try some basics:

* Ask the user for a number. Print whether that number is odd or even.

* Write a program that will comment on a person's age. Have the user
  input their age. If they are between the ages of 0 and 20
  (inclusive), print a message ("You're young!", for example); if they
  are older than 20, but less-than or equal-to 50, print something
  else; and if they are older than 50 print something else. If the age
  seems outrageous (less-than zero, or older than 120), tell the user
  they are out of range.

  Note that in python you can combine comparisons:

  ```python
  if x < y and y < z:
    print('Hello')
  ```

  is the same as

  ```python
  if x < y < z:
    print('Hello')
  ```



### <a name="str-output"></a>2. Fun with string output
Given the following list of lists:
```python
list_of_lists = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
```

1. Print the following output:

   ```
   .a
   ...b
   .....c
   .......d
   .........e
   ...........f
   .............g
   ...............h
   .................i
   ```

2. Now print the following output:
   ```
   .a
   .b
   .c
   ...d
   ...e
   ...f
   .....g
   .....h
   .....i
   ```

If you're having trouble, count the number of dots prior to each
letter and correlate that number to each characters position in
the original list.


### <a name="sublist-elements"></a>3. Sublist features
Consider a list of lists:
```python
list_of_lists = [[ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ], [ 10, 11, 12 ]]
```

1. Use a for-loop to count the total number of elements in the
   list. In this example, your programs output would be 12. Remember,
   you can use the function `len` to get the length of a sequence.

2. Create a new list containing the product of the respective
   sublists. Your final output should be

   ```python
   [ 6 , 120, 504, 1320 ]
   ```


### <a name="sublist-product"></a>4. Random sublist features
Redo the previous exercise on a list you generate randomly!

To do this, first copy your code from the previous exercise into a new
file. Update the code such that `list_of_lists` is not "static."
Specifically, that means instead of using the 4-list 3-element list
that was provided (`list_of_lists`), generate a new list-of-lists that
has *n* lists containing *m* elements; where *n* and *m* are generated
randomly.

The values that go into the sublists can also be random. If you are
tired of using random integers, consider using random floats:

```python
random.uniform(x, y)
```

where `x` and `y` are range specifiers.

If you did the previous exercise correctly, your code for element
counting and product aggregation should continue to work *without
alteration*.


### <a name="rndstr"></a>5. Random words
Create a list containing strings of arbitrary size. Doing this will
require a loop to generate the strings, inside of a loop that builds
the list.

To build strings, a loop must first decide how long the string will be
--- you can use a random value between three and eight. Next, within
the loop, you should decide the value of a single character. You can
do this using Python's
[chr](https://docs.python.org/3/library/functions.html#chr) function,
which takes an integer and returns a string of length one (based on
the [ASCII](http://www.ascii.cl) value):

```
>>> chr(97)
'a'
```

Lower case letters between "a" and "z" have values 97 through 122
(97+25). Thus, you should use a for-loop to build a string
character-by-character (we did this in the previous lab).

The outer loop should be used to store completed strings in a
list. When the (outer) loop is finished, print the list of strings,
with each string on a separate line.


### <a name="pretty-print"></a>6. Pretty printing
Turn the following list of lists:
```python
list_of_lists = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
```
into a nicely formatted box:
```
+-+-+-+
|a|b|c|
+-+-+-+
|d|e|f|
+-+-+-+
|g|h|i|
+-+-+-+
```

Specifically, decorate the contents of the list(s) with the formatting
characters `+` and `-`.

One strategy to do this is to keep the formatting characters within
the list of lists. That's not a good idea. Instead use characteristics
of the data structure to figure out how many decorators to use and how
those decorators should be laid out. You'll know you have done this
correctly if the code you have written works for lists of different
sizes without altering any of the code you've written for the original
list. For example,

```python
list_of_lists_A = [
   ['a', 'b', 'c', '1'],
   ['d', 'e', 'f', '2'],
   ['g', 'h', 'i', '3']
]
```
becomes
```
+-+-+-+-+
|a|b|c|1|
+-+-+-+-+
|d|e|f|2|
+-+-+-+-+
|g|h|i|3|
+-+-+-+-+
```
while
```python
list_of_lists_B = [
   ['a', 'b', 'c', '1'],
   ['d', 'e', 'f', '2'],
   ['g', 'h', 'i', '3'],
   ['j', 'k', 'l', '4']
]
```
becomes
```
+-+-+-+-+
|a|b|c|1|
+-+-+-+-+
|d|e|f|2|
+-+-+-+-+
|g|h|i|3|
+-+-+-+-+
|j|k|l|4|
+-+-+-+-+
```
using the same code.


## Additional Practice


### <a name="grid"></a>1. Making the band
Create a 3-by-3 grid:

```
+-+-+-+
| | | |
+-+-+-+
| | | |
+-+-+-+
| | | |
+-+-+-+
```

Put x's in the cube based on user specification. Specifically, the
user will provide two sets of coordinates; your job is to make a
continuous line of x's in the cube based on those coordinates.

```
Please enter the first coordinate: 0,0
Please enter the second coordinate: 0,2
```

This would place a band of `x`'s down the first (0<sup>th</sup>)
column:

```
+-+-+-+
|x| | |
+-+-+-+
|x| | |
+-+-+-+
|x| | |
+-+-+-+
```

You can assume that in the input given by the user either the columns
will be the same or the rows will be the same. For example, if the
first coordinate entered were *x,y*, and the second coordinate *a,b*,
either *x* would equal *a*, or *y* would equal *b*.


### <a name="transpose"></a>2. Matrix transposition
A list of lists can also be thought of as a matrix. In this context,
sublists can either be row values or column values, depending on your
interpretation (known as row-major and column-major, respectively).

Consider the matrix

```python
mtx = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
```

Assuming this is row-major, it would be pretty printed (see previous)
as follows:

```
+-+-+-+
|1|2|3|
+-+-+-+
|4|5|6|
+-+-+-+
|7|8|9|
+-+-+-+
```

The objective of this exercise is to transpose that matrix and
pretty print the results. Specifically, the rows should become
columns, and the columns should become rows:

```
+-+-+-+
|1|4|7|
+-+-+-+
|2|5|8|
+-+-+-+
|3|6|9|
+-+-+-+
```

